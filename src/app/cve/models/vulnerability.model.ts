/** relate a CVE ID to its severity scores */
export class CVSSScore {
    baseScore: number;
    cveId: string;

    constructor(baseScore: number, cveId: string) {
        this.baseScore = baseScore;
        this.cveId = cveId;
    }
}

/** relate a Common Product Enumeration to a domain and product */
export interface Product {
    cpe: string;
    domain: string;
    productId: number;
    version: string;
    purl: string;
}

/** relate CVE id to a VDO noun group and its confidence score */
export interface VDO {
    cveId: string;
    vdoConfidence: number;
    vdoLabel: string;
    vdoNounGroup: string;
    userId: Number;
    isActive: number;
}

/** description for dropdown */
export interface AlternateDescription {
    description: string;
    createdDate: string;
    isUserGenerated: Number;
}

export interface PatchCommit {
    cveId: string;
    sourceUrl: string;
    commitSha: string;
    commitMessage: string;
    uniDiff: string;
    timeline: string;
    timeToPatch: string;
    linesChanged: number;
    commitDate: string;
}

export interface Fix {
    cveId: string;
    sourceUrl: string;
    fixDescription: string;
}

export interface Exploit {
    name: string
    description: string
    exampleFile: string
    author: string
    datePublished: string
    isRepo: boolean
    source: string
    dateCreated: string
    downloadFailed: boolean
    cveId: string
    sourceUrl: string
}

export interface PatchCommit {
    cveId: string;
    sourceUrl: string;
    commitSha: string;
    commitMessage: string;
    uniDiff: string;
    timeline: string;
    timeToPatch: string;
    linesChanged: number;
    commitDate: string;
}

export interface Fix {
    cveId: string;
    sourceUrl: string;
    fixDescription: string;
}

export interface Exploit {
    name: string
    description: string
    exampleFile: string
    author: string
    datePublished: string
    isRepo: boolean
    source: string
    dateCreated: string
    downloadFailed: boolean
    cveId: string
    sourceUrl: string
}

export interface SSVC {
    cveId: string
    missionAndWellbeing: string
    score: string
}

/** response from vulnerabilityServlet - see src/main/java/model/Vulnerability.java */
export interface Vulnerability {
    createdDate: string
    /** Given Common Platform Enumerations for the vuln */
    cpes: Array<string>;
    /** typically CVE-XXXX-XXXXX */
    cveId: string;
    /** list of confidence scores for each noun group */
    purl: string;

    cvssScore: CVSSScore;
    /** CVE description text */
    description: string;
    /** alternate description text for dropdown */
    altDescription: AlternateDescription;
    /** discovered by CNA or another source */
    discoveredBy: string;
    /** domain based on CPE string */
    domain: string;
    /** is the vuln found in Mitres database? */
    existInMitre: boolean;
    /** is the vuln found in National Vulnerability Database? */
    existInNvd: boolean;
    /** found fix steps to Vuln */
    fixes: Array<Fix>;
    /** when was CVE last updated */
    lastModifiedDate: string;
    /** link to patch published */
    patch?: string; // TODO: Make this pull from patchCommits maybe? Not sure of its purpose
    /** array of commits detected by PatchFinder */
    patchCommits: Array<PatchCommit>;
    /** descriptions/fix instructions to go along with patchCommits */
    patchDescriptions: Array<string>;
    /** platform and version information */
    platform: string;
    /** list of affected products */
    products: Array<Product>;
    /** when was CVE published online */
    publishedDate: string;
    /** where was it published */
    sources: Array<any>;
    /** string indicating how far along in the fix process the vuln is */
    status: string;
    /** how much faster were we than mitre at finding it */
    timeGapMitre: number;
    /** how much faster were we than National Vuln Database at finding it */
    timeGapNvd: number;
    /** what type of vulnerability is this? Man in the middle? remote code? */
    type: string;
    /** connect CVE ID to list of noun groups and their confidence scores */
    vdoList: Array<VDO>;
    /** ID of vuln in OUR database */
    vulnId: number;
    /** array of exploits detected by Exploit Scraper **/
    exploits: Array<Exploit>
    /** array of exploits detected by Exploit Scraper **/
    //ssvcScores: SSVCData
}
